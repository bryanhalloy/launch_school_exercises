
P
Write a program that can tell whether a number is perfect, abundant, or deficient.

Input: number
Return: String with label
Output: nothing

Explicit requirements

== Aliquot sum is sum of its positive divisors (the numbers that can be evenly divided into the target number with no remainder, excluding the number itself)
=/ Perfect numbers have an Aliquot sum that is equal to the original number.
=/ Abundant numbers have an Aliquot sum that is greater than the original number.
=/ Deficient numbers have an Aliquot sum that is less than the original number.


Implicit requirements
=/ No negative numbers

Assumed requirements
=/ Input validation (must be an integer)
=/ Zero is deficient

E
6 is a perfect number since its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6.
28 is a perfect number since its divisors are 1, 2, 4, 7, and 14 and 1 + 2 + 4 + 7 + 14 = 28.
15 is a deficient number since its divisors are 1, 3, and 5 and 1 + 3 + 5 = 9 which is less than 15.
24 is an abundant number since its divisors are 1, 2, 3, 4, 6, 8, and 12 and 1 + 2 + 3 + 4 + 6 + 8 + 12 = 36 which is greater than 24.
Prime numbers 7, 13, etc. are always deficient since their only divisor is 1.

D
PerfectNumber
PerfectNumber::classify

A
Find Aliquot sum
  initialize factors array
  set initial factor to 1
  loop until less than number
    check if mod is zero
    if yes, shovel in
    incremenet by 1, next
  return array.sum


Test for perfection
if not in right class, raise error
if negative, raise error
if zero, return deficient

case Aliquot sum <=> number
  ...




C

